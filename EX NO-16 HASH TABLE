#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

// Hash function
int hash(int key) {
    return key % TABLE_SIZE;
}

// Initialize the hash table for open addressing
void initOpenAddr(int* keys, int* values) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        keys[i] = -1;  // -1 indicates empty slot
        values[i] = -1;
    }
}

// Insert into hash table using open addressing
void insertOpenAddr(int* keys, int* values, int key, int value) {
    int index = hash(key);
    int origIndex = index;
    while (keys[index] != -1 && keys[index] != key) {
        index = (index + 1) % TABLE_SIZE;
        if (index == origIndex) {
            printf("Hash table is full\n");
            return;
        }
    }
    keys[index] = key;
    values[index] = value;
}

// Search in hash table using open addressing
int searchOpenAddr(int* keys, int* values, int key) {
    int index = hash(key);
    int origIndex = index;
    while (keys[index] != -1) {
        if (keys[index] == key) {
            return values[index];
        }
        index = (index + 1) % TABLE_SIZE;
        if (index == origIndex) {
            break;
        }
    }
    return -1; // Key not found
}

// Initialize the hash table for closed addressing (chaining)
void initClosedAddr(Node** table) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        table[i] = NULL;
    }
}

// Create a new node
Node* createNode(int key, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

// Insert into hash table using closed addressing (chaining)
void insertClosedAddr(Node** table, int key, int value) {
    int index = hash(key);
    Node* newNode = createNode(key, value);
    newNode->next = table[index];
    table[index] = newNode;
}

// Search in hash table using closed addressing (chaining)
int searchClosedAddr(Node** table, int key) {
    int index = hash(key);
    Node* temp = table[index];
    while (temp) {
        if (temp->key == key) {
            return temp->value;
        }
        temp = temp->next;
    }
    return -1; // Key not found
}

// Rehash function
int rehash(int key) {
    return (key / TABLE_SIZE) % TABLE_SIZE;
}

// Insert into hash table using rehashing
void insertRehash(int* keys, int* values, int key, int value) {
    int index = hash(key);
    if (keys[index] == -1) {
        keys[index] = key;
        values[index] = value;
    } else if (keys[index] == key) {
        values[index] = value; // Update value if key already exists
    } else {
        index = rehash(key);
        while (keys[index] != -1 && keys[index] != key) {
            index = (index + 1) % TABLE_SIZE;
        }
        keys[index] = key;
        values[index] = value;
    }
}

// Search in hash table using rehashing
int searchRehash(int* keys, int* values, int key) {
    int index = hash(key);
    if (keys[index] == key) {
        return values[index];
    }
    index = rehash(key);
    while (keys[index] != -1) {
        if (keys[index] == key) {
            return values[index];
        }
        index = (index + 1) % TABLE_SIZE;
    }
    return -1; // Key not found
}

// Main function to demonstrate the hash table with collision resolution
int main() {
    // Open Addressing
    int openAddrKeys[TABLE_SIZE];
    int openAddrValues[TABLE_SIZE];
    initOpenAddr(openAddrKeys, openAddrValues);
    insertOpenAddr(openAddrKeys, openAddrValues, 1, 10);
    insertOpenAddr(openAddrKeys, openAddrValues, 11, 20);
    printf("Open Addressing: Value for key 1: %d\n", searchOpenAddr(openAddrKeys, openAddrValues, 1));
    printf("Open Addressing: Value for key 11: %d\n", searchOpenAddr(openAddrKeys, openAddrValues, 11));

    // Closed Addressing (Chaining)
    Node* closedAddrTable[TABLE_SIZE];
    initClosedAddr(closedAddrTable);
    insertClosedAddr(closedAddrTable, 1, 10);
    insertClosedAddr(closedAddrTable, 11, 20);
    printf("Closed Addressing: Value for key 1: %d\n", searchClosedAddr(closedAddrTable, 1));
    printf("Closed Addressing: Value for key 11: %d\n", searchClosedAddr(closedAddrTable, 11));

    // Rehashing
    int rehashKeys[TABLE_SIZE];
    int rehashValues[TABLE_SIZE];
    initOpenAddr(rehashKeys, rehashValues); // Reuse initialization for open addressing
    insertRehash(rehashKeys, rehashValues, 1, 10);
    insertRehash(rehashKeys, rehashValues, 11, 20);
    printf("Rehashing: Value for key 1: %d\n", searchRehash(rehashKeys, rehashValues, 1));
    printf("Rehashing: Value for key 11: %d\n", searchRehash(rehashKeys, rehashValues, 11));

    return 0;
}
